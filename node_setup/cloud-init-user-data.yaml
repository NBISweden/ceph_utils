#cloud-config
write_files:
  # Script 1
  - path: /root/setup-00-raid1-boot-partitions.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash

      echo "Post-deployment script setup-00-raid1-boot-partitions.sh running" >> /var/log/post_deploy_setup-00-raid1-boot-partitions.log

      # Get the name of the NVMe drive mounted on /boot/efi
      boot_nvme=$(lsblk -no pkname $(df --output=source /boot/efi | tail -n 1))

      # Determine the other NVMe drive
      if [[ "$boot_nvme" == "nvme0n1" ]]; then
        other_nvme="nvme1n1"
      elif [[ "$boot_nvme" == "nvme1n1" ]]; then
        other_nvme="nvme0n1"
      else
        echo "Error: Neither of the NVMe drives are mounted on /boot/efi."
        exit 1
      fi

      # add entry for 2nd partition
      efibootmgr -c -L "ubuntu1" -d /dev/$other_nvme -p 1 -l "\EFI\ubuntu\shimx64.efi"

      # set boot order to the boot partitions before network
      # Find the IDs for "ubuntu" entries and store them in a variable
      ubuntu_ids=$(efibootmgr | grep 'ubuntu' | awk '{print substr($1, 5, 4)}' | tr '\n' ',' | sed 's/,$//')

      # Get the current boot order and store it in a variable
      current_order=$(efibootmgr | grep "^BootOrder:" | cut -d ' ' -f 2)

      # Create the new boot order by prepending the "ubuntu" IDs
      new_boot_order="${ubuntu_ids},${current_order}"

      # Remove duplicates
      cleaned_order=$(echo "$new_boot_order" | awk 'BEGIN{RS=ORS=","} !seen[$1]++' | head -c -1)

      # Trim the trailing comma
      cleaned_order="${cleaned_order%,}"

      # Use the new boot order in the efibootmgr command
      efibootmgr -o "$cleaned_order"

      # create raid volume with 2nd partition only
      yes | mdadm --create /dev/md100 --level 1 --raid-disks 2 --metadata 1.0 -f /dev/${other_nvme}p1 missing

      # create fs
      mkfs.fat -F32 /dev/md100

      # copy content to raid
      mkdir /tmp/RAID; mount /dev/md100 /tmp/RAID
      rsync -av --progress /boot/efi/ /tmp/RAID/

      # add 1st partition to raid
      umount /dev/${boot_nvme}p1
      mdadm --manage /dev/md100 --add /dev/${boot_nvme}p1

      # change boot to raid partition and make it not automount in fstab
      sed -i 's|/dev/disk/by-uuid/[^\s]\+ /boot/efi vfat defaults 0 1|/dev/md100 /boot/efi vfat umask=0077,noauto,defaults 0 0|' /etc/fstab

      # add to mdadm.conf and make it not automount
      mdadm --detail --scan | grep 100 >> /etc/mdadm/mdadm.conf
      sed -i 's|/dev/md100|<ignore>|' /etc/mdadm/mdadm.conf

      # make it sync on boot
      uuid=$(grep '<ignore>' /etc/mdadm/mdadm.conf | awk -F'UUID=' '{print $2}')
      cat > /etc/systemd/system/mdadm_esp.service <<EOF
      [Unit]
      Description=Resync /boot/efi RAID
      DefaultDependencies=no
      After=local-fs.target

      [Service]
      Type=oneshot
      ExecStart=/sbin/mdadm -A /dev/md100 --uuid=$uuid --update=resync
      ExecStart=/bin/mount /boot/efi
      RemainAfterExit=yes

      [Install]
      WantedBy=sysinit.target
      EOF
      systemctl enable mdadm_esp.service

      # clean up
      umount /tmp/RAID/
      mount /boot/efi

      # update 
      update-initramfs -u

  # Script 2
  - path: /root/setup-10-install-ceph-dependencies.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash

      echo "Post-deployment script setup-10-install-ceph-dependencies.sh running" >> /var/log/post_deploy_setup-10-install-ceph-dependencies.log

      # Add Docker's official GPG key:
      sudo apt-get update
      sudo apt-get install ca-certificates curl
      sudo install -m 0755 -d /etc/apt/keyrings
      sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      sudo chmod a+r /etc/apt/keyrings/docker.asc

      # Add the repository to Apt sources:
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get update


      # install dependencies
      sudo apt-get install -y net-tools cephadm ceph-common docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin smartmontools btop

      # get the helper scripts
      cd /home/ubuntu
      sudo -u ubuntu bash -c "git clone https://github.com/NBISweden/ceph_utils.git"

runcmd:
  # Execute raid1 creation script
  - [ bash, -c, '/root/setup-00-raid1-boot-partitions.sh' ]
  
  # Execute dependency installation script
  - [ bash, -c, '/root/setup-10-install-ceph-dependencies.sh' ]
